var documenterSearchIndex = {"docs":
[{"location":"examples/example/","page":"Design","title":"Design","text":"DocTestSetup = quote\n    using ControlSystems, Plots\n    plotsDir = joinpath(dirname(pathof(ControlSystems)), \"..\", \"docs\", \"build\", \"plots\")\n    mkpath(plotsDir)\n    nyquistplot(ssrand(1,1,1)) # to get the warning for hover already here\n    save_docs_plot(name) = Plots.savefig(joinpath(plotsDir,name))\n    save_docs_plot(p, name) = Plots.savefig(p, joinpath(plotsDir,name))\nend","category":"page"},{"location":"examples/example/#Examples","page":"Design","title":"Examples","text":"","category":"section"},{"location":"examples/example/#LQR-design","page":"Design","title":"LQR design","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"using ControlSystemsBase\nusing LinearAlgebra # For identity matrix I\nusing Plots\nTs      = 0.1\nA       = [1 Ts; 0 1]\nB       = [0; 1]\nC       = [1 0]\nsys     = ss(A,B,C,0,Ts)\nQ       = I\nR       = I\nL       = lqr(Discrete,A,B,Q,R) # lqr(sys,Q,R) can also be used\n\nu(x,t)  = -L*x .+ 1.5(t>=2.5)# Form control law (u is a function of t and x), a constant input disturbance is affecting the system from t≧2.5\nt       = 0:Ts:5\nx0      = [1,0]\ny, t, x, uout = lsim(sys,u,t,x0=x0)\nplot(t,x', lab=[\"Position\" \"Velocity\"], xlabel=\"Time [s]\")","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"(Image: )","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"For more advanced LQR and LQG design, see the LQGProblem type in RobustAndOptimalControl.","category":"page"},{"location":"examples/example/#PID-design-functions","page":"Design","title":"PID design functions","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"A basic PID controller can be constructed using the constructor pid.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"The following examples show basic workflows for designing PI/PID controllers. ","category":"page"},{"location":"examples/example/#PI-loop-shaping-example","page":"Design","title":"PI loop shaping example","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"By plotting the gang of four under unit feedback for the process","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"P(s) = dfrac1(s + 1)^4","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"using ControlSystemsBase, Plots\nP = tf(1,[1,1])^4\ngangoffourplot(P,tf(1))","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"we notice that the sensitivity function is a bit too high around frequencies ω = 0.8 rad/s. Since we want to control the process using a simple PI-controller, we utilize the function loopshapingPI and tell it that we want 60 degrees phase margin at this frequency. The resulting gang of four is plotted for both the constructed controller and for unit feedback.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"using ControlSystemsBase, Plots\nP = tf(1,[1,1])^4\nωp = 0.8\nC,kp,ki,fig = loopshapingPI(P,ωp,phasemargin=60,form=:parallel, doplot=true)\nfig","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"We could also consider a situation where we want to create a closed-loop system with the bandwidth ω = 2 rad/s, in which case we would write something like","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"ωp = 2\nC60,kp,ki,fig = loopshapingPI(P,ωp,rl=1,phasemargin=60,form=:standard,doplot=true)\nfig","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"Here we specify that we want the Nyquist curve L(iω) = P(iω)C(iω) to pass the point |L(iω)| = rl = 1,  arg(L(iω)) = -180 + phasemargin = -180 + 60 The gang of four tells us that we can indeed get a very robust and fast controller with this design method, but it will cost us significant control action to double the bandwidth of all four poles.","category":"page"},{"location":"examples/example/#PID-loop-shaping","page":"Design","title":"PID loop shaping","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"Processes with inertia, like double integrators, require a derivative term in the controller for good results. The function loopshapingPID allows you to specify a point in the Nyquist plane where the loop-transfer function  L(s) = P(s)C(s) should be tangent to the circle that denotes T = dfracPC1 + PC = M_t The tangent point is specified by specifying M_t and the angle phi_t between the real axis and the tangent point, indicated in the Nyquist plot below.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"using ControlSystemsBase, Plots\nP  = tf(1, [1,0,0]) # A double integrator\nMt = 1.3            # Maximum magnitude of complementary sensitivity\nϕt = 75             # Angle of tangent point\nω  = 1              # Frequency at which the specification holds\nC, kp, ki, kd, fig = loopshapingPID(P, ω; Mt, ϕt, doplot=true)\nfig","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"To get good robustness, we typically aim for a M_t less than 1.5. In general, the smaller M_t we require, the larger the controller gain will be.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"Since we are designing a PID controller, we expect a large controller gain for high frequencies. This is generally undesirable for both robustness and noise reasons, and is commonly solved by introducing a lowpass filter in series with the controller. The example below passes the keyword argument Tf=1/20ω to indicate that we want to add a second-order lowpass filter with a cutoff frequency 20 times faster than the design frequency.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"Tf = 1/20ω\nC, kp, ki, kd, fig, CF = loopshapingPID(P, ω; Mt, ϕt, doplot=true, Tf)\nfig","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"As we can see, the addition of the filter increases the high-frequency roll-off in both T and CS, which is typically desireable.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"To get better control over the filter, it can be pre-designed and supplied to loopshapingPID with the keyword argument F:","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"F = tf(1, [Tf^2, 2*Tf/sqrt(2), 1])\nC, kp, ki, kd, fig, CF = loopshapingPID(P, ω; Mt, ϕt, doplot=true, F)","category":"page"},{"location":"examples/example/#Advanced-pole-zero-placement","page":"Design","title":"Advanced pole-zero placement","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"This example illustrates how we can perform advanced pole-zero placement. The task is to make the process P a bit faster and damp the poorly damped poles.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"Define the process","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"ζ = 0.2\nω = 1\n\nB = [1]\nA = [1, 2ζ*ω, ω^2]\nP = tf(B,A)","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"Define the desired closed-loop response, calculate the controller polynomials and simulate the closed-loop system. The design utilizes an observer poles twice as fast as the closed-loop poles. An additional observer pole is added in order to get a casual controller when an integrator is added to the controller.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"using ControlSystems\nimport DSP: conv\n# Control design\nζ0 = 0.7\nω0 = 2\nAm = [1, 2ζ0*ω0, ω0^2]\nAo = conv(2Am, [1/2, 1]) # Observer polynomial, add extra pole due to the integrator\nAR = [1,0] # Force the controller to contain an integrator ( 1/(s+0) )\n\nB⁺  = [1] # The process numerator polynomial can be facored as B = B⁺B⁻ where B⁻ contains the zeros we do not want to cancel (non-minimum phase and poorly damped zeros)\nB⁻  = [1]\nBm  = conv(B⁺, B⁻) # In this case, keep the entire numerator polynomial of the process\n\nR,S,T = rstc(B⁺,B⁻,A,Bm,Am,Ao,AR) # Calculate the 2-DOF controller polynomials\n\nGcl = tf(conv(B,T),zpconv(A,R,B,S)) # Form the closed loop polynomial from reference to output, the closed-loop characteristic polynomial is AR + BS, the function zpconv takes care of the polynomial multiplication and makes sure the coefficient vectores are of equal length\n\nplot(step(P, 20))\nplot!(step(Gcl, 20)) # Visualize the open and closed loop responses.\ngangoffourplot(P, tf(-S,R)) # Plot the gang of four to check that all tranfer functions are OK","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/example/#Stability-boundary-for-PID-controllers","page":"Design","title":"Stability boundary for PID controllers","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"The stability boundary, i.e., the surface of PID parameters where the transfer function P(s)C(s) equals -1, can be plotted with the command stabregionPID. The process can be given in function form or as a regular LTIsystem.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"P1 = s -> exp(-sqrt(s))\ndoplot = true\nform = :parallel\nkp, ki, f1 = stabregionPID(P1,exp10.(range(-5, stop=1, length=1000)); doplot, form); f1\nP2 = s -> 100*(s+6).^2. /(s.*(s+1).^2. *(s+50).^2)\nkp, ki, f2 = stabregionPID(P2,exp10.(range(-5, stop=2, length=1000)); doplot, form); f2\nP3 = tf(1,[1,1])^4\nkp, ki, f3 = stabregionPID(P3,exp10.(range(-5, stop=0, length=1000)); doplot, form); f3","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/example/#PID-plots","page":"Design","title":"PID plots","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"This example utilizes the function pidplots, which accepts vectors of PID-parameters and produces relevant plots. The task is to take a system with bandwidth 1 rad/s and produce a closed-loop system with bandwidth 0.1 rad/s. If one is not careful and proceed with pole placement, one easily get a system with very poor robustness.","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"using ControlSystemsBase\nP = tf([1.], [1., 1])\n\nζ = 0.5 # Desired damping\nws = exp10.(range(-1, stop=2, length=8)) # A vector of closed-loop bandwidths\nkp = 2*ζ*ws .- 1 # Simple pole placement with PI given the closed-loop bandwidth, the poles are placed in a butterworth pattern\nki = ws.^2\n\nω = exp10.(range(-3, stop = 2, length = 500))\npidplots(\n    P,\n    :nyquist;\n    params_p = kp,\n    params_i = ki,\n    ω = ω,\n    ylims = (-2, 2),\n    xlims = (-3, 3),\n    form = :parallel,\n)\npidplots(P, :gof; params_p = kp, params_i = ki, ω = ω, legend = false, form=:parallel, legendfontsize=6, size=(1000, 1000))\n# You can also request both Nyquist and Gang-of-four plots (more plots are available, see ?pidplots ):\n# pidplots(P,:nyquist,:gof;kps=kp,kis=ki,ω=ω);","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"Now try a different strategy, where we have specified a gain crossover frequency of 0.1 rad/s","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"kp = range(-1, stop=1, length=8) #\nki = sqrt.(1 .- kp.^2)/10\n\npidplots(P,:nyquist,;params_p=kp,params_i=ki,ylims=(-1,1),xlims=(-1.5,1.5), form=:parallel)\npidplots(P,:gof,;params_p=kp,params_i=ki,legend=false,ylims=(0.08,8),xlims=(0.003,20), form=:parallel, legendfontsize=6, size=(1000, 1000))","category":"page"},{"location":"examples/example/","page":"Design","title":"Design","text":"(Image: ) (Image: )","category":"page"},{"location":"examples/example/#Further-examples","page":"Design","title":"Further examples","text":"","category":"section"},{"location":"examples/example/","page":"Design","title":"Design","text":"See the examples folder as well as the notebooks in ControlExamples.jl.\nSee also the paper introducing the toolbox with supplementary material.\nSee the docs for RobustAndOptimalControl.jl for additional examples.","category":"page"},{"location":"man/creating_systems/#Creating-Systems","page":"Creating Systems","title":"Creating Systems","text":"","category":"section"},{"location":"man/creating_systems/#Creating-Transfer-Functions","page":"Creating Systems","title":"Creating Transfer Functions","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"DocTestSetup = quote\n    using ControlSystems\nend","category":"page"},{"location":"man/creating_systems/#tf-Rational-Representation","page":"Creating Systems","title":"tf - Rational Representation","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"The syntax for creating a transfer function is","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"tf(num, den)     # Continuous-time system\ntf(num, den, Ts) # Discrete-time system","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"where num and den are the polynomial coefficients of the numerator and denominator of the polynomial and Ts, if provided, is the sample time for a discrete-time system.","category":"page"},{"location":"man/creating_systems/#Example:","page":"Creating Systems","title":"Example:","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"tf([1.0],[1,2,1])\n\n# output\n\nTransferFunction{Continuous, ControlSystemsBase.SisoRational{Float64}}\n        1.0\n-------------------\n1.0s^2 + 2.0s + 1.0\n\nContinuous-time transfer function model","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"The transfer functions created using this method will be of type TransferFunction{SisoRational}.","category":"page"},{"location":"man/creating_systems/#zpk-Pole-Zero-Gain-Representation","page":"Creating Systems","title":"zpk - Pole-Zero-Gain Representation","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Sometimes it's better to represent the transfer function by its poles, zeros and gain, this can be done using","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"zpk(zeros, poles, gain)     # Continuous-time system\nzpk(zeros, poles, gain, Ts) # Discrete-time system","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"where zeros and poles are Vectors of the zeros and poles for the system and gain is a gain coefficient.","category":"page"},{"location":"man/creating_systems/#Example","page":"Creating Systems","title":"Example","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"zpk([-1.0,1], [-5, -10], 2)\n\n# output\n\nTransferFunction{Continuous, ControlSystemsBase.SisoZpk{Float64, Float64}}\n   (1.0s + 1.0)(1.0s - 1.0)\n2.0-------------------------\n   (1.0s + 5.0)(1.0s + 10.0)\n\nContinuous-time transfer function model","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"The transfer functions created using this method will be of type TransferFunction{SisoZpk}.","category":"page"},{"location":"man/creating_systems/#ss-Creating-State-Space-Systems","page":"Creating Systems","title":"ss - Creating State-Space Systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"A state-space system is created using","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"ss(A,B,C,D)    # Continuous-time system\nss(A,B,C,D,Ts) # Discrete-time system","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"and they behave similarily to transfer functions. State-space systems with heterogeneous matrix types are also available, which can be used to create systems with static or sized matrices, e.g.,","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"using ControlSystemsBase, StaticArrays\nimport ControlSystemsBase.HeteroStateSpace\nto_static(a::Number) = a\nto_static(a::AbstractArray) = SMatrix{size(a)...}(a)\nto_sized(a::Number) = a\nto_sized(a::AbstractArray) = SizedArray{Tuple{size(a)...}}(a)\nfunction HeteroStateSpace(A,B,C,D,Ts=0,f::F=to_static) where F\n    HeteroStateSpace(f(A),f(B),f(C),f(D),Ts)\nend\nHeteroStateSpace(s,f) = HeteroStateSpace(s.A,s.B,s.C,s.D,s.timeevol,f)\nControlSystemsBase._string_mat_with_headers(a::SizedArray) = ControlSystemsBase._string_mat_with_headers(Matrix(a)); # Overload for printing purposes\n\nnothing # hide","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Notice the different matrix types used","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"sys = ss([-5 0; 0 -5],[2; 2],[3 3],[0])\nHeteroStateSpace(sys, to_static)\nHeteroStateSpace(sys, to_sized)","category":"page"},{"location":"man/creating_systems/#Converting-between-types","page":"Creating Systems","title":"Converting between types","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"It is sometime useful to convert one representation to another, this is possible using the constructors tf, zpk, ss, for example","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"tf(zpk([-1], [1], 2, 0.1))\n\n# output\n\nTransferFunction{Discrete{Float64}, ControlSystemsBase.SisoRational{Int64}}\n2z + 2\n------\nz - 1\n\nSample Time: 0.1 (seconds)\nDiscrete-time transfer function model","category":"page"},{"location":"man/creating_systems/#Creating-Delay-Systems","page":"Creating Systems","title":"Creating Delay Systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"The constructor delay creates a pure delay, which may be connected to a system by multiplication:","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"delay(1.2)               # Pure delay or 1.2s\ntf(1, [1, 1])*delay(1.2) # Input delay\ndelay(1.2)*tf(1, [1, 1]) # Output delay","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Delayed systems can also be created using","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"s = tf(\"s\")\nL = 1.2 # Delay time\ntf(1, [1, 1]) * exp(-L*s)","category":"page"},{"location":"man/creating_systems/#Creating-Nonlinear-Systems","page":"Creating Systems","title":"Creating Nonlinear Systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"See Nonlinear functionality.","category":"page"},{"location":"man/creating_systems/#Simplifying-systems","page":"Creating Systems","title":"Simplifying systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"A statespace system with a non-minimal realization, or a transfer function with overlapping zeros and poles, may be simplified using the function minreal. Systems that are structurally singular, i.e., that contains outputs that can not be reached from the inputs based on analysis of the structure of the zeros in the system matrices only, can be simplified with the function sminreal.","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Examples:","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"using ControlSystemsBase\nG = tf([1, 1], [1, 1])\nminreal(G) # Performs pole-zero cancellation\n\nP = tf(1, [1, 1]) |> ss\nG = P / (1 + P) # this creates a non-minimal realization, use feedback(P) instead\nfeedback(P) # Creates a minimal realization directly\nGmin = minreal(G) # this simplifies the realization to a minimal realization\nnorm(Gmin - feedback(P), Inf) # No difference\nbodeplot([G, Gmin, feedback(P)]) # They are all identical","category":"page"},{"location":"man/creating_systems/#Multiplying-systems","page":"Creating Systems","title":"Multiplying systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Two systems can be connected in series by multiplication","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"using ControlSystemsBase\nP1 = ss(-1,1,1,0)\nP2 = ss(-2,1,1,0)\nP2*P1","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"If the input dimension of P2 does not match the output dimension of P1, an error is thrown. If one of the systems is SISO and the other is MIMO, broadcasted multiplication will expand the SISO system to match the input or output dimension of the MIMO system, e.g.,","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Pmimo = ssrand(2,2,1)\nPsiso = ss(-2,1,1,0)\n# Psiso * Pmimo # error\nPsiso .* Pmimo ≈ [Psiso 0; 0 Psiso] * Pmimo # Broadcasted multiplication expands SISO into diagonal system","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Broadcasted multiplication between a system and an array is only allowed for diagonal arrays","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"using LinearAlgebra\nPsiso .* I(2)","category":"page"},{"location":"man/creating_systems/#MIMO-systems-and-arrays-of-systems","page":"Creating Systems","title":"MIMO systems and arrays of systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Concatenation of systems creates MIMO systems, which is different from an array of systems. For example","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"using ControlSystemsBase\nP = ss(-1,1,1,0)\nP_MIMO = [P 2P]","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"is a 1×2 MISO system, not a 1×2 array.","category":"page"},{"location":"man/creating_systems/#From-SISO-to-MIMO","page":"Creating Systems","title":"From SISO to MIMO","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"SISO systems do not multiply MIMO systems directly, i.e.,","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"using Test\nsiso = ss(-1,1,1,0)\nmimo = ssrand(2,2,2)\n@test_throws DimensionMismatch siso * mimo","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"To multiply siso with each output channel of mimo in the example above, use broadcasting:","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"siso .* mimo","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"This is equivalent to first expanding the SISO system into a diagonal system","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"using LinearAlgebra\n(siso .* I(2)) * mimo","category":"page"},{"location":"man/creating_systems/#Converting-an-array-of-systems-to-a-MIMO-system","page":"Creating Systems","title":"Converting an array of systems to a MIMO system","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"Diagonal MIMO systems can be created from a vector of systems using append","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"P1 = ssrand(1,1,1)\nP2 = ssrand(1,1,1)\nappend(P1, P2)","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"More general arrays of systems can be converted to a MIMO system using array2mimo.","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"sys_array = fill(P, 2, 2) # Creates an array of systems\nmimo_sys = array2mimo(sys_array)","category":"page"},{"location":"man/creating_systems/#Converting-MIMO-system-to-an-array-of-systems","page":"Creating Systems","title":"Converting MIMO system to an array of systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"This conversion is not explicitly supported, but is easy enough to accomplish with standard Julia code, for example:","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"P = ssrand(2,3,1) # A random 2×3 MIMO system\nsys_array = getindex.(Ref(P), 1:P.ny, (1:P.nu)')","category":"page"},{"location":"man/creating_systems/#Creating-arrays-with-different-types-of-systems","page":"Creating Systems","title":"Creating arrays with different types of systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"When calling hcat/vcat, Julia automatically tries to promote the types to the smallest common supertype, this means that creating an array with one continuous and one discrete-time system fails","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"P_cont = ssrand(2,3,1) \nP_disc = ssrand(2,3,1, Ts=1)\n@test_throws ErrorException [P_cont, P_disc] # ERROR: Sampling time mismatch","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"You can explicitly tell Julia that you want a particular supertype, e.g,","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"StateSpace[P_cont, P_disc]","category":"page"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"The type StateSpace is abstract, since the type parameters are not specified.","category":"page"},{"location":"man/creating_systems/#Demo-systems","page":"Creating Systems","title":"Demo systems","text":"","category":"section"},{"location":"man/creating_systems/","page":"Creating Systems","title":"Creating Systems","text":"The module ControlSystemsBase.DemoSystems contains a number of demo systems demonstrating different kinds of dynamics.","category":"page"},{"location":"man/numerical/#Performance-considerations","page":"Performance considerations","title":"Performance considerations","text":"","category":"section"},{"location":"man/numerical/#Numerical-accuracy","page":"Performance considerations","title":"Numerical accuracy","text":"","category":"section"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"Transfer functions, and indeed polynomials in general, are infamous for having poor numerical properties. Consider the simple polynomial ax^n - 1 which, due to rounding of the polynomial coefficients, is represented as (a+epsilon)x^n - 1 where epsilon is on the order of eps(a). The roots of this polynomial have a much larger epsilon, due to the n:th root in the expression dfrac1sqrtn(a + epsilon). For this reason, it's ill-advised to use high-order transfer functions. Orders as low as 6 may already be considered high. When a transfer function is converted to a state-space representation using ss(G), balancing is automatically performed in an attempt at making the numerical properties of the model better.","category":"page"},{"location":"man/numerical/#Frequency-response-calculation","page":"Performance considerations","title":"Frequency-response calculation","text":"","category":"section"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"For small systems (small number of inputs, outputs and states), evaluating the frequency-response of a transfer function is reasonably accurate and very fast.","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"G = tf(1, [1, 1])\nw = exp10.(LinRange(-2, 2, 200));\n@btime freqresp($G, $w);\n# 4.351 μs (2 allocations: 3.31 KiB)","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"Evaluating the frequency-response for the equivalent state-space system incurs some additional allocations due to a Hessenberg matrix factorization","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"sys = ss(G);\n@btime freqresp($sys, $w);\n# 20.820 μs (16 allocations: 37.20 KiB)","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"For larger systems, the state-space calculations are considerably more accurate, provided that the realization is well balanced.","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"For optimal performance, one may preallocate the return array","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"ny,nu = size(G)\nR = zeros(ComplexF64, ny, nu, length(w));\n\n@btime freqresp!($R, $G, $w);\n# 4.214 μs (1 allocation: 64 bytes)","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"Other functions that accept preallocated workspaces are","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"bodemag!\nfreqresp!\nlsim!","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"an example using bodemag! follows:","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"using ControlSystemsBase\nG = tf(ssrand(2,2,5))\nw = exp10.(LinRange(-2, 2, 20000))\n@btime bode($G, $w);\n# 55.120 ms (517957 allocations: 24.42 MiB)\n@btime bode($G, $w, unwrap=false); # phase unwrapping is slow\n# 3.624 ms (7 allocations: 2.44 MiB)\nws = ControlSystemsBase.BodemagWorkspace(G, w)\n@btime bodemag!($ws, $G, $w);\n# 2.991 ms (1 allocation: 64 bytes)","category":"page"},{"location":"man/numerical/#Time-domain-simulation","page":"Performance considerations","title":"Time-domain simulation","text":"","category":"section"},{"location":"man/numerical/#Time-scale","page":"Performance considerations","title":"Time scale","text":"","category":"section"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"When simulating a dynamical system in continuous time, a differential-equation integrator is used. These integrators are sensitive to the scaling of the equations, and may perform poorly for stiff problems or problems with a poorly chosen time scale. In, e.g., electronics, it's common to simulate systems where the dominant dynamics have time constants on the order of microseconds. To simulate such systems accurately, it's often a good idea to model the system in microseconds rather than in seconds. The function time_scale can be used to automatically change the time scale of a system.","category":"page"},{"location":"man/numerical/#Transfer-functions","page":"Performance considerations","title":"Transfer functions","text":"","category":"section"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"Transfer functions are automatically converted to state-space form before time-domain simulation. If you want control over the exact internal representation used, consider modeling the system as a state-space system already from start. ","category":"page"},{"location":"man/numerical/#Discrete-time-simulation","page":"Performance considerations","title":"Discrete-time simulation","text":"","category":"section"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"Linear systems with zero-order-hold inputs can be exactly simulated in discrete time. You may specify ZoH-discretization in the call to lsim using method=:zoh or manually perform the discretization using c2d. Discrete-time simulation is often much faster than continuous-time integration.","category":"page"},{"location":"man/numerical/","page":"Performance considerations","title":"Performance considerations","text":"For discrete-time systems, the function lsim! accepts a pre-allocated workspace objects that can be used to avoid allocations for repeated simulations.","category":"page"},{"location":"examples/ilc/#Iterative-Learning-Control","page":"Iterative Learning Control (ILC)","title":"Iterative-Learning Control","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"In this example, we will design an Iterative-Learning Control (ILC) iteration scheme. ILC can be though of as a simple reinforcement-learning strategy that is suitable in situations where a repetitive task is to be performed multiple times, and disturbances acting on the system are also repetitive and predictable but unknown. Multiple versions of ILC exists, in this tutorial we will consider a heuristic scheme as well as a model-based scheme. ","category":"page"},{"location":"examples/ilc/#Algorithm","page":"Iterative Learning Control (ILC)","title":"Algorithm","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"The ILC iteration scheme typically looks something like this (many variants exists), at ILC iteration k:","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"beginaligned\ny_k(t) = G(q) big(r(t) + a_k(t) big) \ne_k(t) = r(t) - y_k(t) \na_k(t) = Q(q) big( a_k-1(t) + L(q) e_k-1(t) big)\nendaligned","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"where q is the time-shift operator, G(q) is the transfer function from the reference r to the output y, i.e, typically a closed-loop transfer function, e_k is the control error and a_k is the ILC adjustment signal, an additive correction to the reference that is learned throughout the ILC iterations in order to minimize the control error. Q(q) and L(q) are stable filters that control the learning dynamics. Interestingly, these filters does not have to be causal since they operate on the signals e and a between ILC iterations, when the whole signals are available at once for acausal filtering. ","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"In simulation (the rollout y_k = G(q) (r + a_k) is simulated), this scheme is nothing other than an open-loop optimal-control strategy, while if y_k = G(q) (r + a_k) amounts to performing an actual experiment on a process, ILC turns into episode-based reinforcement learning or adaptive control.","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"The system to control in this example is a double-mass system with a spring and damper in between. This system is a common model of a servo system where one mass represents the motor and the other represents the load. The spring and damper represents a flexible transmission between them. We will create two instances of the system model. G represents the nominal model, whereas G_act represents the actual (unknown) dynamics. This simulates a model-based approach where there is a slight error in the model. The error will lie in the mass of the load, simulating, e.g., that the motor is driving a heavier load than specified. ","category":"page"},{"location":"examples/ilc/#System-model-and-controller","page":"Iterative Learning Control (ILC)","title":"System model and controller","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"using ControlSystemsBase, Plots\n\nfunction double_mass_model(; \n                Jm = 1,   # motor inertia\n                Jl = 1,   # load inertia\n                k  = 100, # stiffness\n                c0 = 1,   # motor damping\n                c1 = 1,   # transmission damping\n                c2 = 1,   # load damping\n)\n\n    A = [\n        0.0 1 0 0\n        -k/Jm -(c1 + c0)/Jm k/Jm c1/Jm\n        0 0 0 1\n        k/Jl c1/Jl -k/Jl -(c1 + c2)/Jl\n    ]\n    B = [0, 1/Jm, 0, 0]\n    C = [1 0 0 0]\n    ss(A, B, C, 0)\nend\n\nG    = double_mass_model(Jl = 1)\nGact = double_mass_model(Jl = 1.5) # 50% more load than modeled\n\nbodeplot([G, Gact], lab=[\"G model\" \"G actual\"], plotphase=false)","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"We will design a PID controller with a filter for the system, the controller is poorly tuned and not very good at tracking fast reference steps, in practice, one would likely design a feedforward controller as well to improve upon this, but for now we'll stick with the simple feedback controller.","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"C  = pid(10, 1, 1, form = :series) * tf(1, [0.02, 1])\nTs = 0.02 # Sample time\nGc = c2d(feedback(G*C), Ts)       |> tf\nGcact = c2d(feedback(Gact*C), Ts) |> tf\nplot(step(Gc, 10), title=\"Closed-loop step response\", lab=\"model\")\nplot!(step(Gcact, 10), lab=\"actual\")","category":"page"},{"location":"examples/ilc/#Reference-trajectory","page":"Iterative Learning Control (ILC)","title":"Reference trajectory","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"Next up we design a reference trajectory and simulate the actual closed-loop dynamics.","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"T = 3pi    # Duration\nt = 0:Ts:T # Time vector\nfunction funnysin(x)\n    x = sin(x)\n    s,a = sign(x), abs(x)\n    s*((a + 0.01)^0.2 - 0.01^0.2)\nend\nr = funnysin.(t)' |> Array # Reference signal\n\nres = lsim(Gcact, r, t)\nplot(res, plotu=true, layout=1, sp=1, title=\"Closed-loop simulation with actual dynamics\", lab=[\"y\" \"r\"])","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"Performance is poor.. Enter ILC!","category":"page"},{"location":"examples/ilc/#Non-causal-filtering","page":"Iterative Learning Control (ILC)","title":"Non-causal filtering","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"For ILC to work well, we define two helper functions. One that applies a zero-phase filter by filtering both forwards and backwards (filtfilt). This is possible since ILC operates on signals offline, between iterations in the ILC scheme. We also define a special lsim that handles non-causal systems to allow \"lookahead\" into the future. This typically improves the performance of ILC by quite a lot, and is once again possible since ILC operates on prerecorded signals. ","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"function lsim_zerophase(G, u, args...; kwargs...)\n    res = lsim(G, u[:, end:-1:1], args...; kwargs...)\n    lsim(G, res.y[:, end:-1:1], args...; kwargs...).y\nend\n\nfunction lsim_noncausal(L::LTISystem{<:Discrete}, u, args...; kwargs...)\n    np = length(denpoly(L)[])\n    nz = length(numpoly(L)[])\n    zeroexcess = nz-np\n    if zeroexcess <= 0\n        return lsim(L, u, args...; kwargs...)\n    end\n    integrators = tf(1, [1, 0], L.Ts)^zeroexcess\n    res = lsim(L*integrators, u, args...; kwargs...)\n    res.y[1:end-zeroexcess] .= res.y[1+zeroexcess:end]\n    res.y\nend\nnothing # hide","category":"page"},{"location":"examples/ilc/#Choosing-filters","page":"Iterative Learning Control (ILC)","title":"Choosing filters","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"The next step is to define the ILC filters Q(x) and L(z).","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"The filter L(q) acts as a frequency-dependent step size. To make the procedure take smaller steps, simply scale L by a constant < 1. Scaling down L makes the learning process slower but more robust. A heuristic choice of L is some form of scaled lookahead, such as 05z^l where l geq 0 is the number of samples lookahead. A model-based approach may use some form of inverse of the system model, which is what we will use here. [nonlinear]","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"[nonlinear]: Inverse models can be formed also for some nonlinear systems. ModelingToolkit.jl is particularily well suited for inverting models due to its acausal nature.","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"The filter Q(q) acts to make the procedure robust w.r.t. noise and modeling errors. Q has a final say over what frequencies appear in a and it's good to choose Q with low-pass properties. Q will here be applied in zero-phase mode, so the effective transfer function will be Q(z)Q(z).","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"z = tf(\"z\", Ts)\nQ = c2d(tf(1, [0.05, 1]), Ts)\n# L = 0.9z^1 # A more conservative and heuristic choice\nL = 0.5inv(Gc) # Make the scaling factor smaller to take smaller steps\nnothing # hide","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"A theorem due to Norrlöf says that for the ILC iterations to converge, one needs to satisfy  1 - LG   Q^-1 which we can verify by looking at the Bode curves of the two sides of the inequality","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"bodeplot([inv(Q), (1 - L*Gc)], plotphase=false, lab=[\"Stability boundary \\$Q^{-1}\\$\" \"\\$1 - LG\\$\"])\nbodeplot!((1 - L*Gcact), plotphase=false, lab=\"\\$1 - LG\\$ actual\")","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"Above, we plotted this curve also for the actual dynamics. This is of course not possible in a real scenario where this is unknown, but one could plot it for multiple plausible models and verify that they are all below the boundary. See Uncertainty modeling using RobustAndOptimalControl.jl for guidance on this. Looking at the stability condition, it becomes obvious how making Q small where the model is uncertain is beneficial for robustness of the ILC scheme.","category":"page"},{"location":"examples/ilc/#ILC-iteration","page":"Iterative Learning Control (ILC)","title":"ILC iteration","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"The next step is to implement the ILC scheme and run it:","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"function ilc(Gc, Q, L)\n    a = zero(r) # ILC adjustment signal starts at 0\n    fig = plot(t, vec(r), sp=1, layout=(3,1), l=(:black, 3), lab=\"Ref\")\n    for iter = 1:5\n        ra = r .+ a\n        res = lsim(Gc, ra, t) # Simulate system, replaced by an actual experiment if running on real process\n        y = res.y             # System response\n        e = r .- y            # Error\n        Le = lsim_noncausal(L, e, t)\n        a  = lsim_zerophase(Q, a + Le, t) # Update ILC adjustment\n\n        plot!(res, plotu=true, sp=[1 2], title=[\"Output \\$y(t)\\$\" \"Adjusted reference \\$r + a\\$\"], lab=\"Iter $iter\", c=iter)\n        plot!(e[:], sp=3, title=\"Tracking error \\$e(t)\\$\", lab=\"err: $(round(sum(abs2, e), digits=2))\", c=iter)\n    end\n    fig\nend\nilc(Gc, Q, L)","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"When running on the model, the result looks very good. We see that the tracking error in the last plot decreases rapidly and is much smaller after only a couple of iterations. We also note that the adjusted reference r+a has effectively been phase-advanced slightly to compensate for the lag in the system dynamics. This is an effect of the acausal filtering due to L = G_C^-1.","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"How does it work on the \"actual\" dynamics?","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"ilc(Gcact, Q, L)","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"The result is subtly worse, but considering the rather big model error the result is still quite good. ","category":"page"},{"location":"examples/ilc/#Summary","page":"Iterative Learning Control (ILC)","title":"Summary","text":"","category":"section"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"We have seen how ILC can be used to improve tracking performance in a scenario where a repetitive task is to be executed several times. In simulation like here, ILC can be seen as an optimal-control strategy to come up with a optimal reference trajectory to minimize the control error, while if implemented on a physical process, the scheme amounts to a simple but effective reinforcement-learning or adaptive-control approach. ILC often works very well in practice and has been used in robotics and machining among other areas. ","category":"page"},{"location":"examples/ilc/","page":"Iterative Learning Control (ILC)","title":"Iterative Learning Control (ILC)","text":"ILC does not work very well if stochastic disturbances dictate the control performance or a task is to be performed only a small number of times. In, e.g., machining applications, each ILC iteration may imply performing destructive machining on expensive material with suboptimal result before convergence. This may only be cost effective if the task is to be performed many times after an initial \"tuning\" by means of ILC.","category":"page"},{"location":"man/differences/#Noteworthy-Differences-from-other-Languages","page":"Noteworthy differences from other languages","title":"Noteworthy Differences from other Languages","text":"","category":"section"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"If you are new to the Julia programming language, you are encouraged to visit the documentation page on noteworthy differences between Julia and other programming languages.","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"The rest of this page will list noteworthy differences between ControlSystems.jl and other pieces of control-systems software.","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"Functions to calculate poles and zeros of systems are named using their plural forms, i.e., poles instead of pole, and tzeros instead of tzero.\nSimulation using lsim, step, impulse returns arrays where time is in the second dimension rather than in the first dimension (applies also to freqresp, bode, nyquist etc.). Julia uses a column major memory layout, and this choice is made for performance reasons.\nFunctions are, lqr and kalman have slightly different signatures in julia compared to in other languages. More advanced LQG functionalities are located in RobustAndOptimalControl.jl.\nSimulation using lsim, step, impulse etc. return a structure that can be plotted. These functions never plot anything themselves.\nFunctions bode, nyquist etc. never produce a plot. Instead, see bodeplot, nyquistplot etc.\nIn Julia, functionality is often split up into several different packages. You may therefore have to install and use additional packages in order to cover all your needs. See Ecosystem for a collection of control-related packages.\nIn Julia, 1 has a different type than 1.0, and the types in ControlSystemsBase.jl respect the types chosen by the user. As an example, tf(1, [1, 1]) is a transfer function with integer coefficients, while tf(1.0, [1, 1]) will promote all coefficients to Float64.\nIn Julia, code can often be differentiated using automatic differentiation. When using ControlSystems.jl, we recommend trying ForwardDiff.jl for AD. An example making use of this is available here.\nIn Julia, the source code is often very readable. If you want to learn how a function is implemented, you may find the macros @edit or @less useful to locate the source code.\nIf you run into an issue (bug) with a Julia package, you can share this issue (bug report) on the package's github page and it will often be fixed promptly. To open an issue with ControlSystems.jl, click here. Thank you for helping out improving open-source software!\nJulia compiles code just before it is called the first time. This introduces a noticeable lag, and can make packages take a long time to load. If you want to speed up the loading of ControlSystems.jl, consider building a system image that includes ControlSystems.jl using PackageCompiler.jl. More info about this is available below under Precompilation for faster load times","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"If you find other noteworthy differences between ControlSystems.jl and other pieces of control-related software, please consider submitting a pull request (PR) to add to the list above. You can submit a PR by clicking on \"Edit on GitHub\" at the top of this page and then clicking on the icon that looks like a pen above the file viewer. A two-minute video on this process is available below","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"<iframe style=\"height: 315px; width: 560px\" src=\"https://www.youtube.com/embed/ZpH1ry8qqfw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"page"},{"location":"man/differences/#Precompilation-for-faster-load-times","page":"Noteworthy differences from other languages","title":"Precompilation for faster load times","text":"","category":"section"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"In order to make it faster to load the ControlSystems.jl package, you may make use of PackageCompiler.jl. ","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"warning: For developers\nIf you intend to develop ControlSystem.jl, i.e., modify the source code, it's not recommended to build the package into the system image. We then recommend to build OrdinaryDiffEq into the system image since this package contributes the largest part of the loading time.","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"Building a custom system image can dramatically reduce the time to get started in a new Julia session, as an example:","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"Without system image:","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"julia> @time using ControlSystems\n  5.725526 seconds (17.91 M allocations: 1.363 GiB, 8.31% gc time, 14.86% compilation time)","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"With OrdinaryDiffEq and Plots in the system image:","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"julia> @time using ControlSystems\n  0.120975 seconds (413.37 k allocations: 27.672 MiB, 1.66% compilation time)","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"To build a system image with ControlSystems, save the following script in a file, e.g., precompile_controlsystems.jl (feel free to add any additional packages you may want to load).","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"using OrdinaryDiffEq # Include this if you want to develop ControlSystems.jl\nusing ControlSystems # Include this if you only want to use ControlSystems.jl\nusing Plots # In case you also want to use plotting functions\n\n# Run some statements to make sure these are precompiled. Do not include this if you want to develop ControlSystems.jl\nfor P = StateSpace[ssrand(2,2,2), ssrand(2,2,2, Ts=0.1)]\n    bodeplot(P)\n    nyquistplot(P)\n    plot(step(P, 10))\nend","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"Then run the following","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"using PackageCompiler\nPackageCompiler.create_sysimage(\n    [\n        :OrdinaryDiffEq,\n        :Plots,\n        :ControlSystems,\n    ];\n    precompile_execution_file = \"precompile_execution_file\",\n    sysimage_path = \"sys_ControlSystems_$(VERSION).so\",\n)\nexit()","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"When you have created a system image, start Julia with the -J flag pointing to the system image that was created, named sys_ControlSystems_<VERSION>.so, more details here. After this, loading the package should be very fast.","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"warning: Updating packages\nWhen you update installed julia packages, the update will not be reflected in the system image until the image is rebuilt. ","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"You can make vscode load this system image as well by adding","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"\"julia.additionalArgs\": [\n    \"-J/path_to_sysimage/sys_ControlSystems_<VERSION>.so\"\n],","category":"page"},{"location":"man/differences/","page":"Noteworthy differences from other languages","title":"Noteworthy differences from other languages","text":"to settings.json.","category":"page"},{"location":"lib/nonlinear/#Nonlinear-functionality","page":"Nonlinear","title":"Nonlinear functionality","text":"","category":"section"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"danger: Experimental\nThe nonlinear interface is currently experimental and at any time subject to breaking changes not respecting semantic versioning. ","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"ControlSystems.jl can represent nonlinear feedback systems that can be written on the form","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"      ┌─────────┐\n y◄───┤         │◄────u\n      │    P    │\nΔy┌───┤         │◄───┐Δu\n  │   └─────────┘    │\n  │                  │\n  │      ┌───┐       │\n  └─────►│ f ├───────┘\n         └───┘","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"i.e., as a linear-fractional transform (LFT) between a linear system P and a diagonal matrix with scalar non-linear functions f. This representation is identical to that used for delay systems, and is exposed to the user in a similar way as well. The main entry point is the function nonlinearity which takes a nonlinear function f like so, nonlinearity(f). This creates a primitive system containing only the nonlinearity, but which behaves like a standard LTISystem during algebraic operations. We illustrate its usage through a number of examples:","category":"page"},{"location":"lib/nonlinear/#Examples","page":"Nonlinear","title":"Examples","text":"","category":"section"},{"location":"lib/nonlinear/#Control-signal-saturation","page":"Nonlinear","title":"Control-signal saturation","text":"","category":"section"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"To create a controller that saturates the output at pm 07, we call","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"using ControlSystems, Plots\nusing ControlSystems: nonlinearity # This functionality is not exported due to the beta status\n\nC    = pid(1, 0.1, form=:parallel)                  # A standard PI controller\nnl   = nonlinearity(x->clamp(x, -0.7, 0.7)) # a saturating nonlinearity\nsatC = nl*C # Connect the saturation at the output of C","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"we may now use this controller like we would normally do in ControlSystems, e.g.,","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"P   = tf(1, [1, 1])    # a plant\nG   = feedback(P*C)    # closed loop without nonlinearity\nGnl = feedback(P*satC) # closed loop with saturation\n\nGu   = feedback(C, P)    # closed loop from reference to control signal without nonlinearity\nGunl = feedback(satC, P) # closed loop from reference to control signal with saturation\n\nplot(step([G; Gu], 5), lab = [\"Linear y\" \"Linear u\"])\nplot!(step([Gnl; Gunl], 5), lab = [\"Nonlinear y\" \"Nonlinear u\"])","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"Since the saturating nonlinearity is common, we provide the constructor ControlSystemsBase.saturation that automatically forms the equivalent to nonlinearity(x->clamp(x, -0.7, 0.7)) while at the same time making sure the function has a recognizable name when the system is printed","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"using ControlSystems: saturation\nsaturation(0.7)","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"See also ControlSystemsBase.ratelimit that saturates the derivative of a signal.","category":"page"},{"location":"lib/nonlinear/#Non-zero-operating-point","page":"Nonlinear","title":"Non-zero operating point","text":"","category":"section"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"It's common to linearize nonlinear systems around some operating point. We may make use of the helper constructor ControlSystemsBase.offset to create affine functions at the inputs and outputs of the linearized system to, e.g.,","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"Make sure that simulations result are given in the original coordinates rather than in the coordinates of the linearization point.\nAllow nonlinearities that are added back after the linearization (such as saturations) to operate with their original parameters.","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"We will demonstrate a composite usage of offset and saturation below. The system we'll consider is a linearized model of a quadruple-tank process;","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"The system is linearized around the operating point","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"xr = [10, 10, 4.9, 4.9] # reference state\nur = [0.263, 0.263]     # control input at the operating point\nnothing # hide","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"and is given by","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"using LinearAlgebra\nkc, k1, k2, g = 0.5, 1.6, 1.6, 9.81\nA1 = A3 = A2 = A4 = 4.9\na1, a3, a2, a4 = 0.03, 0.03, 0.03, 0.03\nh01, h02, h03, h04 = xr\nT1, T2 = (A1/a1)sqrt(2*h01/g), (A2/a2)sqrt(2*h02/g)\nT3, T4 = (A3/a3)sqrt(2*h03/g), (A4/a4)sqrt(2*h04/g)\nc1, c2 = (T1*k1*kc/A1), (T2*k2*kc/A2)\nγ1, γ2 = 0.3, 0.3\n\n# Define the process dynamics\nA = [-1/T1     0 A3/(A1*T3)          0\n        0     -1/T2          0 A4/(A2*T4)\n        0         0      -1/T3          0\n        0         0          0      -1/T4]\nB = [γ1*k1/A1     0\n        0                γ2*k2/A2\n        0                (1-γ2)k2/A3\n        (1-γ1)k1/A4 0              ]\n\nC = kc*[I(2) 0*I(2)] # Measure the first two tank levels\nD = 0\nG = ss(A,B,C,D)\nnothing # hide","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"A PID controller with a filter is given by","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"F = tf(1, [0.63, 1.12, 1])\nCpid = pid(0.26, 0.001, 15.9, form=:parallel)*F |> ss\nnothing # hide","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"and to make the controller MIMO, we add a static pre-compensator that decouples the system at the the zero frequency.","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"iG0 = dcgain(G)\niG0 ./= maximum(abs, iG0)\nC = (Cpid .* I(2)) * iG0 \nnothing # hide","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"The pumps (there are two of them) that service the tanks can only add liquid to the tanks, not remove liquid. The pump is thus saturated from below at 0, and from above at the maximum pump capacity 0.4. ","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"using ControlSystems: offset\numin = [0.0, 0.0]\numax = [0.4, 0.4]\n\nyr    = G.C*xr  # Reference output\nGop   = offset(yr) * G * offset(-ur) # Make the plant operate in Δ-coordinates \nC_sat = saturation(umin, umax) * C   # while the controller and the saturation operate in the original coordinates","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"We now simulate the closed-loop system, the initial state of the plant is adjusted with the operating point x0-xr since the plant operates in Δ-coordinates ","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"x0 = [2, 1, 8, 3] # Initial tank levels\nplot(\n    plot(lsim(feedback(Gop*C_sat), yr, 0:1:3000, x0=[x0-xr; zeros(C.nx)]), layout=1, sp=1, title=\"Outputs\", ylabel=\"\"),\n    plot(lsim(feedback(C_sat, Gop), yr, 0:1:3000, x0=[zeros(C.nx); x0-xr]), layout=1, sp=1, title=\"Control signals\", ylabel=\"\")\n)\nhline!([yr[1]], label=\"Reference\", l=:dash, sp=1, c=1)","category":"page"},{"location":"lib/nonlinear/#Duffing-oscillator","page":"Nonlinear","title":"Duffing oscillator","text":"","category":"section"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"In this example, we'll model and control the nonlinear system","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"ddot x = -kx - k_3 x^3 - c dotx + 10u","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"To do this, we first draw the block diagram","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"10u    ┌───┐\n──────►│+  │   ┌───┐   ┌───┐\n ┌────►│-  │ ẍ │ 1 │ ẋ │ 1 │ x\n │ ┌──►│-  ├──►│ - ├┬─►│ - ├─┬──►\n │ │ ┌►│-  │   │ s ││  │ s │ │\n │ │ │ └───┘   └───┘│  └───┘ │\n │ │ │              │        │\n │ │ │   ┌───┐      │        │\n │ │ └───┤ c │◄─────┘        │\n │ │     └───┘               │\n │ │                         │\n │ │     ┌───┐               │\n │ └─────┤ k │◄──────────────┤\n │       └───┘               │\n │                           │\n │       ┌───┐   ┌───┐       │\n └───────┤ k³│◄──┤ x³│◄──────┘\n         └───┘   └───┘","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"We see that the input u passes through the inner velocity loop before reaching the output x, we can form this inner closed-loop transfer function using feedback(1/s, c), i.e., close the loop over an integrator by -c. This inner loop is then connected in series with another integrator an feedback loop is closed with k_3 x^3 + kx = pos_loop_feedback in the feedback path. Notice how we multiply the final system with 10 from the right to get the input gain correct, for nonlinear systems, 10*sys and sys*10 are not always equivalent!","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"using ControlSystems, Plots\nusing ControlSystems: nonlinearity\nk  = 10\nk3 = 2\nc  = 1\n\ns = tf(\"s\")\n\ncube = nonlinearity(x->x^3)\nvel_loop = feedback(1/s, c)\npos_loop_feedback = (k3*cube + k)\nduffing = feedback(vel_loop/s, pos_loop_feedback)*10\n\nplot(step(duffing, 20), title=\"Duffing oscillator open-loop step response\")","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"We now show how we can make use of the circle criterion to prove stability of the closed loop. The function circle_criterion below plots the Nyquist curve of the loop-transfer function and figures out the circle to avoid by finding sector bounds for the static nonlinearity f(x) = x^3. We then choose a controller an check that it stays outside of the circle. To find the sector bounds, we choose a domain to evaluate the nonlinearity over. The function f(x) = x^3 goes to infinity faster than any linear function, and the upper sector bound is thus ∞, but if we restrict the nonlinearity to a smaller domain, we get a finite sector bound:","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"function circle_criterion(L::ControlSystemsBase.HammersteinWienerSystem, domain::Tuple; N=10000)\n    fun = x->L.f[](x)/x\n    x = range(domain[1], stop=domain[2], length=N)\n    0 ∈ x && (x = filter(!=(0), x)) # We cannot divide by zero\n    k1, k2 = extrema(fun, x)\n\n    f1 = plot(L.f[], domain[1], domain[2], title=\"Nonlinearity\", lab=\"f(x)\", xlab=\"x\")\n    plot!(x, [k1.*x k2.*x], lab=[\"k1 = $(round(k1, sigdigits=2))\" \"k2 = $(round(k2, sigdigits=2))\"], l=(:dash), legend=:bottomright)\n\n    p1 = -1/k2 # Close to origin\n    p2 = -1/k1 # Far from origin\n\n    c = (p1 + p2)/2\n    r = (p2 - p1)/2\n\n    Lnominal = sminreal(ss(L.A, L.B1, L.C1, L.D11, L.P.timeevol))\n    f2 = nyquistplot(Lnominal)\n    if p2 < -1000 # Due to bug in plots\n        vspan!([-1000, p1], fillalpha=0.7, c=:red, primary=false)\n    else\n        th = 0:0.01:2pi\n        Cs,Ss = cos.(th), sin.(th)\n        plot!(r.*Cs .+ c, r.*Ss, fill=true, fillalpha=0.7, c=:red, primary=false)\n    end\n\n    plot(f1,f2)\nend\n\n\nC = pid(2, 0, 1, form=:parallel)*tf(1, [0.01,1])\nf1 = circle_criterion(duffing*C, (-1, 1))\nplot!(sp=2, ylims=(-10, 3), xlims=(-5, 11))\nf2 = plot(step(feedback(duffing, C), 8), plotx=true, plot_title=\"Controlled oscillator disturbance step response\", layout=4)\nplot(f1,f2, size=(1300,800))","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"Since we evaluated the nonlinearity over a small domain, we should convince ourselves that we indeed never risk leaving this domain. ","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"In the example above, the circle turns into a half plane since the lower sector bound is 0. The example below chooses another nonlinearity","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"f(x) = x + sin(x)","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"to get an actual circle in the Nyquist plane.","category":"page"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"wiggly = nonlinearity(x->x+sin(x)) # This function is a bit wiggly\nvel_loop = feedback(1/s, c)\npos_loop_feedback = (k3*wiggly + k)\nduffing = feedback(vel_loop/s, pos_loop_feedback)*10\n\nC = pid(2, 5, 1, form=:parallel)*tf(1,[0.1, 1]) \nf1 = circle_criterion(duffing*C, (-2pi, 2pi))\nplot!(sp=2, ylims=(-5, 2), xlims=(-2.1, 0.1))\nf2 = plot(step(feedback(duffing, C), 8), plotx=true, plot_title=\"Controlled wiggly oscillator disturbance step response\", layout=5)\nplot(f1,f2, size=(1300,800))","category":"page"},{"location":"lib/nonlinear/#Limitations","page":"Nonlinear","title":"Limitations","text":"","category":"section"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"Remember, this functionality is experimental and subject to breakage.\nCurrently only Continuous systems supported. Discrete-time systems will come soon.\nNo nonlinear root-finding is performed during simulation. This limits the kinds of systems that can be simulated somewhat, in particular, no algebraic loops are allowed. \nA lot of functions that expect linear systems will not work for nonlinear systems (naturally).","category":"page"},{"location":"lib/nonlinear/#Future-work","page":"Nonlinear","title":"Future work","text":"","category":"section"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"Discrete-time support.\nBasic support for nonlinear analysis such as stability proof through the circle criterion etc. In particular, predefined nonlinear functions may specify sector bounds for the gain, required by the circle-criterion calculations.\nAdditional nonlinear components, such as \nIntegrator anti-windup\nFriction models?","category":"page"},{"location":"lib/nonlinear/#Docstrings","page":"Nonlinear","title":"Docstrings","text":"","category":"section"},{"location":"lib/nonlinear/","page":"Nonlinear","title":"Nonlinear","text":"ControlSystemsBase.nonlinearity\nControlSystemsBase.offset\nControlSystemsBase.saturation\nControlSystemsBase.ratelimit\nControlSystemsBase.deadzone","category":"page"},{"location":"lib/nonlinear/#ControlSystemsBase.nonlinearity","page":"Nonlinear","title":"ControlSystemsBase.nonlinearity","text":"nonlinearity(f)\nnonlinearity(T, f)\n\nCreate a pure nonlinearity. f is assumed to be a static (no memory) nonlinear function from f  R - R.\n\nThe type T defaults to Float64.\n\nNOTE: The nonlinear functionality in ControlSystemsBase.jl is currently experimental and subject to breaking changes not respecting semantic versioning. Use at your own risk.\n\nExample:\n\nCreate a LTI system with a static input nonlinearity that saturates the input to [-1,1].\n\ntf(1, [1, 1])*nonlinearity(x->clamp(x, -1, 1))\n\nSee also predefined nonlinearities saturation, offset.\n\nNote: when composing linear systems with nonlinearities, it's often important to handle operating points correctly. See ControlSystemsBase.offset for handling operating points.\n\n\n\n\n\n","category":"function"},{"location":"lib/nonlinear/#ControlSystemsBase.offset","page":"Nonlinear","title":"ControlSystemsBase.offset","text":"offset(val)\n\nCreate a constant-offset nonlinearity x -> x + val.\n\nNOTE: The nonlinear functionality in ControlSystemsBase.jl is currently experimental and subject to breaking changes not respecting semantic versioning. Use at your own risk.\n\nExample:\n\nTo create a linear system that operates around operating point y₀, u₀, use\n\noffset_sys = offset(y₀) * sys * offset(-u₀)\n\nnote the sign on the offset u₀. This ensures that sys operates in the coordinates Δu = u-u₀, Δy = y-y₀ and the inputs and outputs to the offset system are in their non-offset coordinate system. If the system is linearized around x₀, y₀ is given by C*x₀. Additional information and an example is available here https://juliacontrol.github.io/ControlSystemsBase.jl/latest/lib/nonlinear/#Non-zero-operating-point\n\n\n\n\n\n","category":"function"},{"location":"lib/nonlinear/#ControlSystemsBase.saturation","page":"Nonlinear","title":"ControlSystemsBase.saturation","text":"saturation(val)\nsaturation(lower, upper)\n\nCreate a saturating nonlinearity. Connect it to the output of a controller C using\n\nCsat = saturation(val) * C\n\n           y▲   ────── upper\n            │  /\n            │ /\n            │/\n  ──────────┼────────► u\n           /│   \n          / │\n         /  │\nlower──── \n\nNOTE: The nonlinear functionality in ControlSystemsBase.jl is currently experimental and subject to breaking changes not respecting semantic versioning. Use at your own risk.\n\nNote: when composing linear systems with nonlinearities, it's often important to handle operating points correctly. See ControlSystemsBase.offset for handling operating points.\n\n\n\n\n\n","category":"function"},{"location":"lib/nonlinear/#ControlSystemsBase.ratelimit","page":"Nonlinear","title":"ControlSystemsBase.ratelimit","text":"ratelimit(val; Tf)\nratelimit(lower, upper; Tf)\n\nCreate a nonlinearity that limits the rate of change of a signal, roughly equivalent to 1s  sat  s. Tf controls the filter time constant on the derivative used to calculate the rate.  NOTE: The nonlinear functionality in ControlSystemsBase.jl is currently experimental and subject to breaking changes not respecting semantic versioning. Use at your own risk.\n\n\n\n\n\n","category":"function"},{"location":"lib/nonlinear/#ControlSystemsBase.deadzone","page":"Nonlinear","title":"ControlSystemsBase.deadzone","text":"deadzone(val)\ndeadzone(lower, upper)\n\nCreate a dead-zone nonlinearity.\n\n       y▲\n        │     /\n        │    /\n  lower │   /\n─────|──┼──|───────► u\n    /   │   upper\n   /    │\n  /     │\n\nNOTE: The nonlinear functionality in ControlSystemsBase.jl is currently experimental and subject to breaking changes not respecting semantic versioning. Use at your own risk.\n\nNote: when composing linear systems with nonlinearities, it's often important to handle operating points correctly. See ControlSystemsBase.offset for handling operating points.\n\n\n\n\n\n","category":"function"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"Pages = [\"plotting.md\"]","category":"page"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"note: Using Plots\nAll plotting requires the user to manually load the Plots.jl library, e.g., by calling using Plots.","category":"page"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"note: Time-domain responses\nThere are no special functions to plot time-domain results, such as step and impulse responses, instead, simply call plot on the result structure (ControlSystemsBase.SimResult) returned by lsim, step, impulse etc.","category":"page"},{"location":"lib/plotting/#Plotting-functions","page":"Plotting","title":"Plotting functions","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"Modules = [ControlSystemslib, ControlSystemsBase]\nPages   = [\"lib/ControlSystemsBase/src/plotting.jl\"]\nOrder   = [:function]\nPrivate = false","category":"page"},{"location":"lib/plotting/#Examples","page":"Plotting","title":"Examples","text":"","category":"section"},{"location":"lib/plotting/#Bode-plot","page":"Plotting","title":"Bode plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: bode)","category":"page"},{"location":"lib/plotting/#Sigma-plot","page":"Plotting","title":"Sigma plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: sigma)","category":"page"},{"location":"lib/plotting/#Margin","page":"Plotting","title":"Margin","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: margin)","category":"page"},{"location":"lib/plotting/#Gangoffour-plot","page":"Plotting","title":"Gangoffour plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: gangoffour)","category":"page"},{"location":"lib/plotting/#Nyquist-plot","page":"Plotting","title":"Nyquist plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: nyquist)","category":"page"},{"location":"lib/plotting/#Nichols-plot","page":"Plotting","title":"Nichols plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: nichols)","category":"page"},{"location":"lib/plotting/#Pole-zero-plot","page":"Plotting","title":"Pole-zero plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: pzmap)","category":"page"},{"location":"lib/plotting/#Rlocus-plot","page":"Plotting","title":"Rlocus plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: rlocus)","category":"page"},{"location":"lib/plotting/#Lsim-response-plot","page":"Plotting","title":"Lsim response plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: lsim)","category":"page"},{"location":"lib/plotting/#Impulse-response-plot","page":"Plotting","title":"Impulse response plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: impulse)","category":"page"},{"location":"lib/plotting/#Step-response-plot","page":"Plotting","title":"Step response plot","text":"","category":"section"},{"location":"lib/plotting/","page":"Plotting","title":"Plotting","text":"(Image: step)","category":"page"},{"location":"lib/analysis/","page":"Analysis","title":"Analysis","text":"Pages = [\"analysis.md\"]","category":"page"},{"location":"lib/analysis/","page":"Analysis","title":"Analysis","text":"For robust analysis, see RobustAndOptimalControl.jl.","category":"page"},{"location":"lib/analysis/#Analysis","page":"Analysis","title":"Analysis","text":"","category":"section"},{"location":"lib/analysis/","page":"Analysis","title":"Analysis","text":"Modules = [ControlSystems, ControlSystemsBase]\nPages   = [\"lib/ControlSystemsBase/src/analysis.jl\", \"lib/ControlSystemsBase/src/matrix_comps.jl\", \"lib/ControlSystemsBase/src/conversion.jl\"]\nOrder   = [:function, :type]\nPrivate = false","category":"page"},{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"See additional API in RobustAndOptimalControl.jl: API","category":"page"},{"location":"lib/constructors/","page":"Constructors","title":"Constructors","text":"Pages = [\"constructors.md\"]","category":"page"},{"location":"lib/constructors/","page":"Constructors","title":"Constructors","text":"See also Connecting named systems together.","category":"page"},{"location":"lib/constructors/#Constructing-systems","page":"Constructors","title":"Constructing systems","text":"","category":"section"},{"location":"lib/constructors/","page":"Constructors","title":"Constructors","text":"append\nc2d\nfeedback\nfeedback2dof\nminreal\nparallel\nseries\nsminreal\nss\ntf\nzpk\ndelay\nssdata","category":"page"},{"location":"lib/constructors/#ControlSystemsBase.append","page":"Constructors","title":"ControlSystemsBase.append","text":"append(systems::StateSpace...), append(systems::TransferFunction...)\n\nAppend systems in block diagonal form\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.c2d","page":"Constructors","title":"ControlSystemsBase.c2d","text":"sysd = c2d(sys::AbstractStateSpace{<:Continuous}, Ts, method=:zoh; w_prewarp=0)\nGd = c2d(G::TransferFunction{<:Continuous}, Ts, method=:zoh)\n\nConvert the continuous-time system sys into a discrete-time system with sample time Ts, using the specified method (:zoh, :foh, :fwdeuler or :tustin). Note that the forward-Euler method generally requires the sample time to be very small relative to the time constants of the system.\n\nmethod = :tustin performs a bilinear transform with prewarp frequency w_prewarp.\n\nw_prewarp: Frequency (rad/s) for pre-warping when usingthe Tustin method, has no effect for other methods.\n\nSee also c2d_x0map\n\n\n\n\n\nc2d(G::DelayLtiSystem, Ts, method=:zoh)\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.feedback","page":"Constructors","title":"ControlSystemsBase.feedback","text":"feedback(sys)\nfeedback(sys1, sys2)\n\nFor a general LTI-system, feedback forms the negative feedback interconnection\n\n>-+ sys1 +-->\n  |      |\n (-)sys2 +\n\nIf no second system is given, negative identity feedback is assumed\n\n\n\n\n\nfeedback(sys1::AbstractStateSpace, sys2::AbstractStateSpace;\n         U1=:, Y1=:, U2=:, Y2=:, W1=:, Z1=:, W2=Int[], Z2=Int[],\n         Wperm=:, Zperm=:, pos_feedback::Bool=false)\n\nBasic use feedback(sys1, sys2) forms the feedback interconnection\n\n           ┌──────────────┐\n◄──────────┤     sys1     │◄──── Σ ◄──────\n    │      │              │      │\n    │      └──────────────┘      -1\n    │                            |\n    │      ┌──────────────┐      │\n    └─────►│     sys2     ├──────┘\n           │              │\n           └──────────────┘\n\nAdvanced use feedback also supports more flexible use according to the figure below\n\n              ┌──────────────┐\n      z1◄─────┤     sys1     │◄──────w1\n ┌─── y1◄─────┤              │◄──────u1 ◄─┐\n │            └──────────────┘            │\n │                                        α\n │            ┌──────────────┐            │\n └──► u2─────►│     sys2     ├───────►y2──┘\n      w2─────►│              ├───────►z2\n              └──────────────┘\n\nU1, W1 specifies the indices of the input signals of sys1 corresponding to u1 and w1 Y1, Z1 specifies the indices of the output signals of sys1 corresponding to y1 and z1 U2, W2, Y2, Z2 specifies the corresponding signals of sys2 \n\nSpecify  Wperm and Zperm to reorder the inputs (corresponding to [w1; w2]) and outputs (corresponding to [z1; z2]) in the resulting statespace model.\n\nNegative feedback (α = -1) is the default. Specify pos_feedback=true for positive feedback (α = 1).\n\nSee also lft, starprod, sensitivity, input_sensitivity, output_sensitivity, comp_sensitivity, input_comp_sensitivity, output_comp_sensitivity, G_PS, G_CS.\n\nSee Zhou, Doyle, Glover (1996) for similar (somewhat less symmetric) formulas.\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.feedback2dof","page":"Constructors","title":"ControlSystemsBase.feedback2dof","text":"feedback2dof(P,R,S,T)\nfeedback2dof(B,A,R,S,T)\n\nReturn BT/(AR+ST) where B and A are the numerator and denomenator polynomials of P respectively\nReturn BT/(AR+ST)\n\n\n\n\n\nfeedback2dof(P::TransferFunction, C::TransferFunction, F::TransferFunction)\n\nReturn the transfer function P(F+C)/(1+PC) which is the closed-loop system with process P, controller C and feedforward filter F from reference to control signal (by-passing C).\n\n         +-------+\n         |       |\n   +----->   F   +----+\n   |     |       |    |\n   |     +-------+    |\n   |     +-------+    |    +-------+\nr  |  -  |       |    |    |       |    y\n+--+----->   C   +----+---->   P   +---+-->\n      |  |       |         |       |   |\n      |  +-------+         +-------+   |\n      |                                |\n      +--------------------------------+\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.minreal","page":"Constructors","title":"ControlSystemsBase.minreal","text":"minreal(tf::TransferFunction, eps=sqrt(eps()))\n\nCreate a minimial representation of each transfer function in tf by cancelling poles and zeros will promote system to an appropriate numeric type\n\n\n\n\n\nminreal(sys::T; fast=false, kwargs...)\n\nMinimal realisation algorithm from P. Van Dooreen, The generalized eigenstructure problem in linear system theory, IEEE Transactions on Automatic Control\n\nFor information about the options, see ?ControlSystemsBase.MatrixPencils.lsminreal\n\nSee also sminreal, which is both numerically exact and substantially faster than minreal, but with a much more limited potential in removing non-minimal dynamics.\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.parallel","page":"Constructors","title":"ControlSystemsBase.parallel","text":"parallel(sys1::LTISystem, sys2::LTISystem)\n\nConnect systems in parallel, equivalent to sys2+sys1\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.series","page":"Constructors","title":"ControlSystemsBase.series","text":"series(sys1::LTISystem, sys2::LTISystem)\n\nConnect systems in series, equivalent to sys2*sys1\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.sminreal","page":"Constructors","title":"ControlSystemsBase.sminreal","text":"sminreal(sys)\n\nCompute the structurally minimal realization of the state-space system sys. A structurally minimal realization is one where only states that can be determined to be uncontrollable and unobservable based on the location of 0s in sys are removed.\n\nSystems with numerical noise in the coefficients, e.g., noise on the order of eps require truncation to zero to be affected by structural simplification, e.g.,\n\ntrunc_zero!(A) = A[abs.(A) .< 10eps(maximum(abs, A))] .= 0\ntrunc_zero!(sys.A); trunc_zero!(sys.B); trunc_zero!(sys.C)\nsminreal(sys)\n\nSee also minreal\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.ss","page":"Constructors","title":"ControlSystemsBase.ss","text":"sys = ss(A, B, C, D)      # Continuous\nsys = ss(A, B, C, D, Ts)  # Discrete\n\nCreate a state-space model sys::StateSpace{TE, T} with matrix element type T and TE is Continuous or <:Discrete.\n\nThis is a continuous-time model if Ts is omitted. Otherwise, this is a discrete-time model with sampling period Ts.\n\nD may be specified as 0 in which case a zero matrix of appropriate size is constructed automatically.  sys = ss(D [, Ts]) specifies a static gain matrix D.\n\nTo associate names with states, inputs and outputs, see named_ss.\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.tf","page":"Constructors","title":"ControlSystemsBase.tf","text":"sys = tf(num, den[, Ts])\nsys = tf(gain[, Ts])\n\nCreate as a fraction of polynomials:\n\nsys::TransferFunction{SisoRational{T,TR}} = numerator/denominator\n\nwhere T is the type of the coefficients in the polynomial.\n\nnum: the coefficients of the numerator polynomial. Either scalar or vector to create SISO systems\n\nor an array of vectors to create MIMO system.\n\nden: the coefficients of the denominator polynomial. Either vector to create SISO systems\n\nor an array of vectors to create MIMO system.\n\nTs: Sample time if discrete time system.\n\nOther uses:\n\ntf(sys): Convert sys to tf form.\ntf(\"s\"), tf(\"z\"): Create the continuous transferfunction s.\n\nSee also: zpk, ss.\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.zpk","page":"Constructors","title":"ControlSystemsBase.zpk","text":"zpk(gain[, Ts])\nzpk(num, den, k[, Ts])\nzpk(sys)\n\nCreate transfer function on zero pole gain form. The numerator and denominator are represented by their poles and zeros.\n\nsys::TransferFunction{SisoZpk{T,TR}} = k*numerator/denominator\n\nwhere T is the type of k and TR the type of the zeros/poles, usually Float64 and Complex{Float64}.\n\nnum: the roots of the numerator polynomial. Either scalar or vector to create SISO systems\n\nor an array of vectors to create MIMO system.\n\nden: the roots of the denominator polynomial. Either vector to create SISO systems\n\nor an array of vectors to create MIMO system.\n\nk: The gain of the system. Obs, this is not the same as dcgain.\nTs: Sample time if discrete time system.\n\nOther uses:\n\nzpk(sys): Convert sys to zpk form.\nzpk(\"s\"): Create the transferfunction s.\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.delay","page":"Constructors","title":"ControlSystemsBase.delay","text":"delay(tau)\ndelay(T::Type{<:Number}, tau)\n\nCreate a pure time delay of length τ of type T.\n\nThe type T defaults to promote_type(Float64, typeof(tau))\n\nExample:\n\nCreate a LTI system with an input delay of L\n\nL = 1\ntf(1, [1, 1])*delay(L)\ns = tf(\"s\")\ntf(1, [1, 1])*exp(-s*L) # Equivalent to the version above\n\n\n\n\n\n","category":"function"},{"location":"lib/constructors/#ControlSystemsBase.ssdata","page":"Constructors","title":"ControlSystemsBase.ssdata","text":"A, B, C, D = ssdata(sys)\n\nA destructor that outputs the statespace matrices.\n\n\n\n\n\n","category":"function"},{"location":"examples/smith_predictor/#Smith-predictor","page":"Smith predictor","title":"Smith predictor","text":"","category":"section"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"This example designs a controller for a plant with a time delay using the internal-model principle, which in this case implies the use of a Smith predictor. The plant is given by $ \\dfrac{1}{s + 1}e^{-s\\tau} = P_0 e^{-s\\tau}$","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"and the control architecture looks like this","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"                ┌──────┐              ┌─────────────┐\nr               │      │          u   │             │\n───+──+────────►│  C0  ├───────────┬─►│ P0*exp(-st) ├─┐y\n   ▲  ▲         │      │           │  │             │ │\n  -│  │-        └──────┘           │  └─────────────┘ │\n   │  │                            │                  │\n   │  │ ┌──────────┐    ┌──────┐   │                  │\n   │  │ │          │    │      │   │                  │\n   │  └─┤1-exp(-st)│◄───┤  P0  │◄──┘                  │\n   │    │          │    │      │                      │\n   │    └──────────┘    └──────┘                      │\n   │                                                  │\n   └──────────────────────────────────────────────────┘","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"The benefit of this approach is that the controller C_0 can be designed for the nominal plant P_0 without time delay, and still behave well in the presence of the delay. We also see why we refer to such a controller as using an \"internal model\", due to the presence of a model of P_0 in the inner feedback path.","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"We now set up the nominal system and PI controller","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"using ControlSystemsBase, Plots\nP0 = ss(-1, 1, 1, 0) # Nominal system","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"We design a PI controller for nominal system using placePI. To verify the pole placement, use, e.g., dampreport(feedback(P0, C0))","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"ω0 = 2\nζ  = 0.7\nC0, _ = placePI(P0, ω0, ζ)","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"We then setup delayed plant + Smith predictor-based controller","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"τ = 8\nP = delay(τ) * P0\nC = feedback(C0, (1.0 - delay(τ))*P0) # form the inner feedback connection in the diagram above","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"We now plot the closed loop responses. The transfer function from r to y is given by PC_r(1+PC_r) = feedback(P*C,1), and from a load disturbance entering at u the transfer function is P(1+PC_r) = feedback(P, C)","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"using ControlSystems # Load full ControlSystems for delay-system simulation\nG = [feedback(P*C, 1) feedback(P, C)] # Reference step at t = 0 and load disturbance step at t = 15\nfig_timeresp = plot(lsim(G, (_,t) -> [1; t >= 15], 0:0.1:40),  title=\"τ = $τ\")","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"Plot the frequency response of the predictor part and compare to a negative delay, which would be an ideal controller that can (typically) not be realized in practice (a negative delay implies foresight). ","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"C_pred = feedback(1, C0*(ss(1.0) - delay(τ))*P0)\nfig_bode = bodeplot([C_pred, delay(-τ)], exp10.(-1:0.002:0.4), ls=[:solid :solid :dash :dash], title=\"\", lab=[\"Smith predictor\" \"\" \"Ideal predictor\" \"\"])\nplot!(yticks=[0.1, 1, 10], sp=1)\nplot!(yticks=0:180:1080, sp=2)","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"Check the Nyquist plot. Note that the Nyquist curve encircles -1 for τ > 2.99","category":"page"},{"location":"examples/smith_predictor/","page":"Smith predictor","title":"Smith predictor","text":"fig_nyquist = nyquistplot(C * P, exp10.(-1:1e-4:2), title=\"τ = $τ\")","category":"page"},{"location":"lib/timefreqresponse/","page":"Time and Frequency response","title":"Time and Frequency response","text":"Pages = [\"timefreqresponse.md\"]","category":"page"},{"location":"lib/timefreqresponse/#Time-and-Frequency-response","page":"Time and Frequency response","title":"Time and Frequency response","text":"","category":"section"},{"location":"lib/timefreqresponse/","page":"Time and Frequency response","title":"Time and Frequency response","text":"Frequency responses are calculated using freqresp, bode and nyquist.","category":"page"},{"location":"lib/timefreqresponse/","page":"Time and Frequency response","title":"Time and Frequency response","text":"Any TransferFunction can be evaluated at a point using F(s), F(omega, true), F(z, false)","category":"page"},{"location":"lib/timefreqresponse/","page":"Time and Frequency response","title":"Time and Frequency response","text":"F(s) evaluates the continuous-time transfer function F at s.\nF(omega,true) evaluates the discrete-time transfer function F at exp(i*Ts*omega)\nF(z,false) evaluates the discrete-time transfer function F at z","category":"page"},{"location":"lib/timefreqresponse/","page":"Time and Frequency response","title":"Time and Frequency response","text":"Simulation with arbitrary inputs is primarily handled by the function lsim, with step and impulse serving as convenience functions to simulate responses to particular inputs.","category":"page"},{"location":"lib/timefreqresponse/","page":"Time and Frequency response","title":"Time and Frequency response","text":"For more extensive nonlinear simulation capabilities, see the notes on ModelingToolkit and DifferentialEquations under The wider Julia ecosystem for control.","category":"page"},{"location":"lib/timefreqresponse/","page":"Time and Frequency response","title":"Time and Frequency response","text":"Modules = [ControlSystems, ControlSystemsBase]\nPages   = [\"lib/ControlSystemsBase/src/timeresp.jl\", \"lib/ControlSystemsBase/src/result_types.jl\", \"lib/ControlSystemsBase/src/freqresp.jl\", \"simulators.jl\"]\nOrder   = [:function, :type]\nPrivate = false","category":"page"},{"location":"lib/timefreqresponse/#ControlSystems.Simulator","page":"Time and Frequency response","title":"ControlSystems.Simulator","text":"Simulator\n\nFields:\n\nP::StateSpace\nf = (x,p,t) -> x\ny = (x,t)   -> y\n\n\n\n\n\n","category":"type"},{"location":"lib/timefreqresponse/#ControlSystems.Simulator-Union{Tuple{AbstractStateSpace}, Tuple{F}, Tuple{AbstractStateSpace, F}} where F","page":"Time and Frequency response","title":"ControlSystems.Simulator","text":"Simulator(P::StateSpace, u = (x,t) -> 0)\n\nUsed to simulate continuous-time systems. See function ?solve for additional info.\n\nUsage:\n\nusing OrdinaryDiffEq, Plots\ndt             = 0.1\ntfinal         = 20\nt              = 0:dt:tfinal\nP              = ss(tf(1,[2,1])^2)\nK              = 5\nreference(x,t) = [1.]\ns              = Simulator(P, reference)\nx0             = [0.,0]\ntspan          = (0.0,tfinal)\nsol            = solve(s, x0, tspan, Tsit5())\nplot(t, s.y(sol, t)[:], lab=\"Open loop step response\")\n\n\n\n\n\n","category":"method"},{"location":"man/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"man/introduction/#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"To install the full set of features, simply run","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"using Pkg; Pkg.add(\"ControlSystems\")","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"For workflows that do not require continuous-time simulation, you may instead opt to install the much lighter package ControlSystemsBase.jl","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"using Pkg; Pkg.add(\"ControlSystemsBase\")","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"ControlSystemsBase contains all functionality of ControlSystems except continuous-time simulation and root locus, and is considerably faster to load and precompile. To enjoy the faster pre-compilation, do not even install ControlSystems since this will cause pre-compilation of OrdinaryDiffEq, which can take several minutes.","category":"page"},{"location":"man/introduction/#Basic-functions","page":"Introduction","title":"Basic functions","text":"","category":"section"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"DocTestSetup = quote\n    using ControlSystems\n    P = tf([1],[1,1])\n    T = P/(1+P)\n    plotsDir = joinpath(dirname(pathof(ControlSystems)), \"..\", \"docs\", \"build\", \"plots\")\n    mkpath(plotsDir)\n    save_docs_plot(name) = Plots.savefig(joinpath(plotsDir,name))\n    save_docs_plot(p, name) = Plots.savefig(p, joinpath(plotsDir,name))\nend","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"State-space systems can be created using the function ss and transfer functions can be created using the function tf(num, den) or tf(num, den, Ts), where num and den are vectors representing the numerator and denominator of a rational function and Ts is the sample time for a discrete-time system. See tf or the section [Creating Systems] for more info. These functions can then be connected and modified using the operators +,-,*,/ and functions like append.","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"Example:","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"P = tf([1.0],[1,1])\nT = P/(1+P)\n\n# output\n\nTransferFunction{Continuous, ControlSystemsBase.SisoRational{Float64}}\n    1.0s + 1.0\n-------------------\n1.0s^2 + 3.0s + 2.0\n\nContinuous-time transfer function model","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"Notice that the poles are not canceled automatically, to do this, the function minreal is available","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"minreal(T)\n\n# output\n\nTransferFunction{Continuous, ControlSystemsBase.SisoRational{Float64}}\n   1.0\n----------\n1.0s + 2.0\n\nContinuous-time transfer function model","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"or use feedback(P) to get a minimal realization directly (recommended):","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"using ControlSystems # hide\nP = tf([1.0],[1,1]) # hide\nfeedback(P) # Equivalent to P/(1+P)","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"note: Numerical accuracy\nTransfer functions represent systems using polynomials and may have poor numerical properties for high-order systems. Well-balanced state-space representations are often better behaved. See Performance considerations for more details.","category":"page"},{"location":"man/introduction/#Plotting","page":"Introduction","title":"Plotting","text":"","category":"section"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"The ControlSystems package is using RecipesBase.jl (link) as interface to generate all the plots. This means that it is up to the user to choose a plotting library that supports RecipesBase.jl, a suggestion would be Plots.jl with which the user is also able to freely choose a back-end. The plots in this manual are generated using Plots.jl with the GR backend. If you have several back-ends for plotting then you can select the one you want to use with the corresponding Plots call (for GR this is Plots.gr(), some alternatives are pyplot(), plotly(), pgfplots()). A simple example where we generate a plot and save it to a file is shown below.","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"More examples of plots are provided in Plotting functions.","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"using Plots\nbodeplot(tf(1,[1,2,1]))","category":"page"},{"location":"lib/synthesis/","page":"Synthesis","title":"Synthesis","text":"Pages = [\"synthesis.md\"]","category":"page"},{"location":"lib/synthesis/#Synthesis","page":"Synthesis","title":"Synthesis","text":"","category":"section"},{"location":"lib/synthesis/","page":"Synthesis","title":"Synthesis","text":"For H_infty and H_2 synthesis as well as more advanced LQG design, see RobustAndOptimalControl.","category":"page"},{"location":"lib/synthesis/","page":"Synthesis","title":"Synthesis","text":"Modules = [ControlSystems, ControlSystemsBase]\nPages   = [\"lib/ControlSystemsBase/src/synthesis.jl\", \"lib/ControlSystemsBase/src/discrete.jl\", \"lib/ControlSystemsBase/src/types/lqg.jl\", \"lib/ControlSystemsBase/src/pid_design.jl\", \"lib/ControlSystemsBase/src/simplification.jl\", \"lib/ControlSystemsBase/src/connections.jl\", \"lib/ControlSystemsBase/src/sensitivity_functions.jl\", \"lib/ControlSystemsBase/src/utilities.jl\"]\nOrder   = [:function, :type]\nPrivate = false","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p style=\"text-align:center\">\n\n<img src=\"https://avatars.githubusercontent.com/u/10605979?s=400&u=7b2efdd404c4db3b3f067f04c305d40c025a8961&v=4\" alt=\"JuliaControl logo\">\n\n<br> \n\n<a class=\"github-button\" href=\"https://github.com/JuliaControl/ControlSystems.jl\" data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-icon=\"octicon-star\" data-show-count=\"true\" aria-label=\"Star JuliaControl/ControlSystems.jl on GitHub\">Star</a>\n\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</p> ","category":"page"},{"location":"#ControlSystems.jl-Manual","page":"Home","title":"ControlSystems.jl Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ControlSystems\nDocTestFilters = [\n    r\"StateSpace.+?\\n\"\n    r\"HeteroStateSpace.+?\\n\"\n    r\"TransferFunction.+?\\n\"\n    r\"DelayLtiSystem.+?\\n\"\n    r\"┌ Warning: Keyword argument hover.+\\n*.+\\n*\" # remove next line as well\n    r\"\\[ Info: Precompiling.+\\n*\"\n]\nnyquistplot(ssrand(1,1,1))","category":"page"},{"location":"","page":"Home","title":"Home","text":"ControlSystems.jl and the rest of the packages in the JuliaControl organization implement solutions for analysis and design of (primarily linear) control systems. If you are new to the Julia programming language, learn more here. If you are familiar with Julia but unfamiliar with the ecosystem for control, learn more under Ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation is structured into an introductory section labeled Introductory guide, a section with Examples and a reference section sorted into topics, labeled Functions.","category":"page"},{"location":"#Introductory-guide","page":"Home","title":"Introductory guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"man/introduction.md\", \"man/creating_systems.md\", \"man/numerical.md\", \"man/differences.md\"]\nDepth = 1","category":"page"},{"location":"#index_examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples/example.md\", \"examples/ilc.md\", \"examples/smith_predictor.md\"]\nDepth = 2","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/constructors.md\",  \"lib/analysis.md\", \"lib/syntheis.md\", \"lib/timefreqresponse.md\", \"lib/plotting.md\"]\nDepth = 1","category":"page"},{"location":"#Ecosystem","page":"Home","title":"Ecosystem","text":"","category":"section"},{"location":"#JuliaControl","page":"Home","title":"JuliaControl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The JuliaControl and surrounding ecosystem contains a few additional packages that may be of interest","category":"page"},{"location":"","page":"Home","title":"Home","text":"RobustAndOptimalControl.jl contains more advanced features for LQG design, robust analysis and synthesis, uncertainty modeling, named systems and an interface to DescriptorSystems.jl.\nSymbolicControlSystems.jl contains basic C-code generation for linear systems.\nControlSystemIdentification.jl is a system-identification toolbox for identification of LTI systems using either time or frequency-domain data.\nDiscretePIDs.jl contains a reference implementation in Julia of a discrete-time PID controller including set-point weighting, integrator anti-windup, derivative filtering and bumpless transfer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also the paper describing the toolbox","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bagge Carlson, F., Fält, M., Heimerson, A., & Troeng, O. (2021). ControlSystems.jl: A Control Toolbox in Julia. In 2021 60th IEEE Conference on Decision and Control (CDC) IEEE Press. https://doi.org/10.1109/CDC45484.2021.9683403","category":"page"},{"location":"","page":"Home","title":"Home","text":"and the introductory Youtube video below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<iframe style=\"height: 315px; width: 560px\" src=\"https://www.youtube.com/embed/Fdz2Fsm1aTY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","category":"page"},{"location":"#The-wider-Julia-ecosystem-for-control","page":"Home","title":"The wider Julia ecosystem for control","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following is a list of packages from the wider Julia ecosystem that may be of interest.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DescriptorSystems.jl contains types that represent statespace systems on descriptor form, i.e., with a mass matrix. These systems can represent linear DAE systems and non-proper systems.\nTrajectoryOptimization.jl is one of the more developed packages for open-loop optimal control and trajectory optimization in Julia.\nLowLevelParticleFilters.jl is a library for state estimation using particle filters and Kalman filters of different flavors.\nModelingToolkit.jl is an acausal modeling tool, similar in spirit to Modelica. A vide showing ControlSystems and ModelingToolkit together is available here. ControlSystemsMTK.jl exists to ease the use of these two packages together.\nFaultDetectionTools.jl contains utilities and observers for online fault detection.\nReachabilityAnalysis.jl is a package for reachability analysis. This can be used to verify stability and safety properties of linear and nonlinear systems.\nMatrixEquations.jl contains solvers for many different matrix equations common in control. ControlSystems.jl makes use of this package for solving Riccati and Lyapunov equations.\nJuMP.jl is a modeling language for optimization, similar to YALMIP. JuMP is suitable for solving LMI/SDP problems as well as advanced linear MPC problems. \nSumOfSquares.jl is a package for sum-of-squares programming that builds on top of JuMP. Their documentation contains examples of Lyapunov-function search and nonlinear synthesis.\nMonteCarloMeasurements.jl is a library for working with parametric uncertainty. An example using ControlSystems is available here.\nDifferentialEquations.jl is the home of the SciML ecosystem that provides solvers for scientific problems. ControlSystems.jl uses these solvers for continuous-time simulations.\nDojo.jl is a differentiable robot simulator.\nStaticCompiler.jl contains tools for compiling small binaries of Julia programs.\nJuliaPOMDP is a Julia ecosystem for reinforcement learning. \nJuliaReinforcementLearning is another Julia ecosystem for reinforcement learning. ","category":"page"},{"location":"examples/delay_systems/#Properties-of-delay-systems","page":"Properties of delay systems","title":"Properties of delay systems","text":"","category":"section"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"Delay systems can sometimes have non-intuitive properties, in particular when the delays appear inside of the system, i.e., not directly on the inputs or outputs. ","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"The Nyquist plot of delay systems usually spirals towards the origin for delay systems. This is due to the phase loss at high frequencies due to the delay:","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"using ControlSystemsBase, Plots\nw = exp10.(LinRange(-2, 2, 2000))\nP = tf(1, [1, 1]) * delay(2) # Plant with delay on the input\nnyquistplot(P, w)","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"When forming a feedback interconnection, making the delay appear in the closed loop, we may get gain ripple:","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"bodeplot(feedback(P), w)","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"If the system with delay has a direct feedthrough term, step responses may show repeated steps at integer multiples of the delay:","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"using ControlSystems # Load full control systems to get simulation functionality\nP = tf([1, 1], [1, 0])*delay(1)\nplot(step(feedback(P, 0.5), 0:0.001:20))","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"Indeed, if the system has a non-zero feedthrough, the output will contain a delayed step attenuated by the feedthrough term, in this case","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"ss(feedback(tf([1, 1], [1, 0]))).D[]","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"the steps will thus in this case decay exponentially with decay rate 0.5. ","category":"page"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"For a more advanced example using time delays, see the Smith predictor tutorial.","category":"page"},{"location":"examples/delay_systems/#Simulation-of-time-delay-systems","page":"Properties of delay systems","title":"Simulation of time-delay systems","text":"","category":"section"},{"location":"examples/delay_systems/","page":"Properties of delay systems","title":"Properties of delay systems","text":"Time-delay systems are numerically challenging to simulate, if you run into problems, please open an issue with a reproducing example. The lsim, step and impulse functions accept keyword arguments that are passed along to the ODE integrator, this can be used to both select integration method and to tweak the integrator options. The documentation for solving delay-differential equations is available here and here.","category":"page"}]
}
